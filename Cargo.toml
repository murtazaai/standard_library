# SPDX-License-Identifier: MURTAZAI
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[package] #Defines a package.
name = "stdlib" #The name of the package.
version = "0.1.0" #The version of the package.
authors = ["Murtaza Ali Imtiaz <murtazalimtiaz@gmail.com>"] #The authors of the package.
edition = "2021" #The Rust edition.
rust-version = "1.56.0" #The minimal supported Rust version.
description = "Just a playground." #A description of the package.
documentation = "" #URL of the package documentation.
readme = "README.md" #Path to the package's README file.
homepage = "https://github.com/murtazaai/stdlib" #URL of the package homepage.
repository = "https://github.com/murtazaai/stdlib" #URL of the package source repository.
keywords = ["stdlib", "playground"] #Keywords for the package.
categories = [] #Categories of the package.
#build = "build/build.rs" #Path to the package build script.
exclude = [] #Files to exclude when publishing.
include = [] #Files to exclude when publishing.
publish = [] #Can be used to prevent publishing the package.
metadata = [] #Extra settings for external tools.
autobins = false #Disables binary auto discovery.
autoexamples = false #Disables example auto discovery.
autotests = false #Disables test auto discovery.
autobenches = false #Disables bench auto discovery.
#default-run = [] #The default binary to run by cargo run.
#license = "PBS" #The package license.
#license-file = "LICENSE-MRUTAZAI" #Path to the text of the license.
#links = [] #Name of the native library the package links with.
#resolver = [] #Sets the dependency resolver to use.
#paths = ["/path/to/override"] # path dependency overrides

#[alias]     # command aliases
#b = "build"
#c = "check"
#t = "test"
#r = "run"
#rr = "run --release"
#recursive_example = "rr --example recursions"
#space_example = ["run", "--release", "--", "\"command list\""]

# [build]
# profiler = true
#jobs = 1                      # number of parallel jobs, defaults to # of CPUs
#rustc = "rustc"               # the rust compiler tool
#rustc-wrapper = "…"           # run this wrapper instead of `rustc`
#rustc-workspace-wrapper = "…" # run this wrapper instead of `rustc` for workspace members
#rustdoc = "rustdoc"           # the doc generator tool
#target = "triple"             # build for the target triple (ignored by `cargo install`)
#target-dir = "target"         # path of where to place all generated artifacts
#rustflags = ["…", "…"]        # custom flags to pass to all compiler invocations
#rustdocflags = ["…", "…"]     # custom flags to pass to rustdoc
#incremental = true            # whether or not to enable incremental compilation
#dep-info-basedir = "…"        # path for the base directory for targets in depfiles

#[doc]
#browser = "chrome"          # browser to use with `cargo doc --open`,
# overrides the `BROWSER` environment variable

[workspace] #Path to the workspace for the package.
members = [
    "macro"
]
#default-members = ["path/to/member2", "path/to/member3/abc"]
#exclude = ["crates/abc", "path/to/other"]

#The workspace.metadata table
#[workspace.metadata.webcontents]
#root = "path/to/webproject"
#tool = ["npm", "run", "build"]
# ...

#[workspace.package]
#version = "1.2.3"
#authors = ["Nice Folks"]
#description = "A short description of my package"
#documentation = "https://example.com/bar"
## [PROJECT_DIR]/bar/Cargo.toml
#[package]
#name = "bar"
#version.workspace = true
#authors.workspace = true
#description.workspace = true
#documentation.workspace = true

# [PROJECT_DIR]/Cargo.toml
#[workspace.dependencies]
#cc = "1.0.73"
#rand = "0.8.5"
#regex = { version = "1.6.0", default-features = false, features = ["std"] }
## [PROJECT_DIR]/bar/Cargo.toml
#[project]
#name = "abc"
#version = "0.2.0"
#
#[dependencies]
#regex = { workspace = true, features = ["unicode"] }
#
#[build-dependencies]
#cc.workspace = true
#
#[dev-dependencies]
#rand.workspace = true

[lib] #Library target settings.
name = "stdlib"           # The name of the target.
path = "src/lib.rs"    # The source file of the target.
test = true            # Is tested by default.
doctest = true         # Documentation examples are tested by default.
bench = true           # Is benchmarked by default.
doc = true             # Is documented by default.
plugin = false         # Used as a compiler plugin (deprecated).
proc-macro = false     # Set to `true` for a proc-macro library.
harness = true         # Use libtest harness.
edition = "2021"       # The edition of the target.
crate-type = ["lib"]   # The crate types to generate.
required-features = [] # Features required to build this target (N/A for lib).

#[[bin]] #Binary target settings.
#name = "stdlib"
#test = false
#bench = false
#
#[[bin]]
#name = "stdlib"
#required-features = ["postgres", "sqlite", "tools"]

[[example]]
name = "stdlib"
crate-type = ["staticlib"]
path = "examples/example.rs"

[profile.dev]
opt-level = 1               # Use slightly better optimizations.
overflow-checks = false     # Disable integer overflow checks.

[profile.release]
strip = "debuginfo"
# panic = 'abort'

#[profile.dev.build-override]
#opt-level = 0
#codegen-units = 256

#[profile.release.build-override]
#opt-level = 0
#codegen-units = 256

#Custom profile
#[profile.release-lto]
#inherits = "release"
#lto = true

#Overrides
# The `foo` package will use the -Copt-level=3 flag.
#[profile.dev.package.foo]
#opt-level = 3

# Set the default for dependencies.
#[profile.dev.package."*"]
#opt-level = 2


#[[test]] #Test target settings.
#test.name = "tests/tests.rs"
##example.test = true
##test.test = true

#[[bench]] #Benchmark target settings.
#bench.name = "stdlib"
#bench.bench = true

#[project]
#name = "stdlib"
#version = "0.1.0"

[dependencies] #Package library dependencies.
num = "0.4.0"
log = "0.4.17"
merkletree = "0.23.0"
substring = "1.4.5"
threadpool = "1.8.1"

# standard crate data is left out
[dev-dependencies] #Dependencies for examples, tests, and benchmarks.
#pretty_assertions = "1"
#rand = { workspace = true, optional = true }

[build-dependencies] #Dependencies for build scripts.
#cc = "1.0.3"

#[features]
#postgres = []
#sqlite = []
#tools = []

[features]
# Defines a feature named `webp` that does not enable any other features.
#serde = ["dep:serde", "rgb?/serde"]
#parallel = ["jpeg-decoder/rayon"]
bmp = []
png = []
ico = ["bmp", "png"]

[target.'cfg(unix)'.dependencies]
#openssl = "0.10.44"

[target.'cfg(unix)'.dev-dependencies]
#mio = "0.0.1"

#[target] #Platform-specific dependencies.
[target.'cfg(unix)'.build-dependencies]
#cc = "1.0.3"

[target.'cfg(target_arch = "x86_64")'.dependencies]
#native-x86_64 = { path = "native/x86_64" }

[badges]
# The `maintenance` table indicates the status of the maintenance of
# the crate. This may be used by a registry, but is currently not
# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437
# and https://github.com/rust-lang/crates.io/issues/2438 for more details.
#
# The `status` field is required. Available options are:
# - `actively-developed`: New features are being added and bugs are being fixed.
# - `passively-maintained`: There are no plans for new features, but the maintainer intends to
#   respond to issues that get filed.
# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on
#   it or providing support, but it works for the purposes it was designed for.
# - `experimental`: The author wants to share it with the community but is not intending to meet
#   anyone's particular use case.
# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone
#   else.
# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate
#   can describe why, there could be a better solution available or there could be problems with
#   the crate that the author does not want to fix).
# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify
#   their intentions, potential crate users will need to investigate on their own.
maintenance = { status = "..." }

#[patch.crates-io]
#stdlib = { git = 'https://github.com/murtazaai/stdlib' }
#stdlib = { path = 'stdlib' }

#[dependencies.stdlib]
#git = 'https://github.com/murtazaai/stdlib'

#[patch.'https://github.com/murtazaai/stdlib']
#stdlib = { git = 'https://github.com/murtazaai/stdlib', branch = 'main' }

#[replace]
#"stdlib:0.1.0" = { git = 'https://github.com/murtazaai/stdlib' }
#"stdlib:0.1.0" = { path = 'stdlib' }